{-# LANGUAGE KindSignatures #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE TypeFamilies #-}
signature Ignite.Heap where

import Ignite.Layout
import Ignite.Prim.Array
import Ignite.Prim.Struct

import Control.Monad.Primitive
import Data.Proxy

data Heap (m :: * -> *) root

allocStruct
  :: ( PrimMonad m
     , struct ~ Struct fields
     , StructSize struct
     )
  => Heap m root
  -> Proxy (Struct fields)
  -> m (Struct fields) 

allocArray
  :: (PrimMonad m, Layout elem)
  => Heap m root
  -> Proxy elem
  -> Int
  -> m (Array elem)
